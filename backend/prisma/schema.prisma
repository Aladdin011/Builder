// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  password          String
  firstName         String
  lastName          String
  phone             String?
  avatar            String?
  role              UserRole           @default(CLIENT)
  isEmailVerified   Boolean            @default(false)
  isActive          Boolean            @default(true)
  lastLogin         DateTime?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  
  // Relations
  profile           UserProfile?
  otpVerifications  OtpVerification[]
  projects          Project[]          @relation("ProjectClient")
  assignedProjects  Project[]          @relation("ProjectAssignee")
  contactForms      ContactForm[]
  testimonials      Testimonial[]
  notifications     Notification[]
  sessions          UserSession[]
  analytics         UserAnalytics?
  leadScoring       LeadScoring?
  
  @@map("users")
}

model UserProfile {
  id              String    @id @default(uuid())
  userId          String    @unique
  company         String?
  position        String?
  bio             String?
  address         String?
  city            String?
  state           String?
  country         String?
  zipCode         String?
  website         String?
  linkedIn        String?
  twitter         String?
  preferences     Json?     // User preferences and settings
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_profiles")
}

model OtpVerification {
  id          String      @id @default(uuid())
  userId      String
  email       String
  otp         String
  type        OtpType
  isUsed      Boolean     @default(false)
  expiresAt   DateTime
  createdAt   DateTime    @default(now())
  
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("otp_verifications")
}

model UserSession {
  id              String    @id @default(uuid())
  userId          String
  token           String    @unique
  refreshToken    String    @unique
  deviceInfo      String?
  ipAddress       String?
  userAgent       String?
  isActive        Boolean   @default(true)
  expiresAt       DateTime
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

model Project {
  id              String           @id @default(uuid())
  title           String
  description     String
  category        ProjectCategory
  status          ProjectStatus    @default(PLANNING)
  priority        ProjectPriority  @default(MEDIUM)
  budget          Decimal?
  actualCost      Decimal?
  startDate       DateTime?
  endDate         DateTime?
  estimatedEndDate DateTime?
  completionPercentage Int         @default(0)
  location        String
  address         String?
  coordinates     Json?            // {lat: number, lng: number}
  clientId        String
  assigneeId      String?
  teamMembers     String[]         // Array of user IDs
  tags            String[]
  features        String[]
  images          ProjectImage[]
  documents       ProjectDocument[]
  timeline        ProjectTimeline[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  
  // Relations
  client          User             @relation("ProjectClient", fields: [clientId], references: [id])
  assignee        User?            @relation("ProjectAssignee", fields: [assigneeId], references: [id])
  contactForms    ContactForm[]
  
  @@map("projects")
}

model ProjectImage {
  id          String    @id @default(uuid())
  projectId   String
  url         String
  filename    String
  originalName String
  mimeType    String
  size        Int
  isMain      Boolean   @default(false)
  caption     String?
  order       Int       @default(0)
  createdAt   DateTime  @default(now())
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_images")
}

model ProjectDocument {
  id          String    @id @default(uuid())
  projectId   String
  name        String
  url         String
  filename    String
  originalName String
  mimeType    String
  size        Int
  type        DocumentType
  createdAt   DateTime  @default(now())
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_documents")
}

model ProjectTimeline {
  id          String    @id @default(uuid())
  projectId   String
  title       String
  description String?
  date        DateTime
  status      TimelineStatus @default(PENDING)
  order       Int
  createdAt   DateTime  @default(now())
  
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@map("project_timeline")
}

model ContactForm {
  id              String        @id @default(uuid())
  name            String
  email           String
  phone           String?
  company         String?
  subject         String
  message         String
  projectType     ProjectCategory?
  budget          String?
  timeline        String?
  location        String?
  source          String?       // utm_source or referrer
  userId          String?
  projectId       String?
  status          ContactStatus @default(NEW)
  priority        ContactPriority @default(MEDIUM)
  assignedTo      String?
  notes           String?
  followUpDate    DateTime?
  isRead          Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  user            User?         @relation(fields: [userId], references: [id])
  project         Project?      @relation(fields: [projectId], references: [id])
  
  @@map("contact_forms")
}

model Testimonial {
  id              String    @id @default(uuid())
  userId          String?
  name            String
  email           String
  company         String?
  position        String?
  location        String?
  avatar          String?
  rating          Int       @default(5)
  testimonial     String
  projectName     String?
  projectValue    String?
  projectDuration String?
  isApproved      Boolean   @default(false)
  isFeatured      Boolean   @default(false)
  hasVideo        Boolean   @default(false)
  videoUrl        String?
  videoThumbnail  String?
  tags            String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  user            User?     @relation(fields: [userId], references: [id])
  
  @@map("testimonials")
}

model Notification {
  id          String            @id @default(uuid())
  userId      String
  title       String
  message     String
  type        NotificationType
  data        Json?             // Additional notification data
  isRead      Boolean           @default(false)
  readAt      DateTime?
  createdAt   DateTime          @default(now())
  
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model UserAnalytics {
  id                String    @id @default(uuid())
  userId            String    @unique
  pageViews         Int       @default(0)
  sessionCount      Int       @default(0)
  totalTimeOnSite   Int       @default(0) // in seconds
  lastVisit         DateTime?
  deviceType        String?   // mobile, tablet, desktop
  browser           String?
  os                String?
  country           String?
  city              String?
  referrer          String?
  utmSource         String?
  utmMedium         String?
  utmCampaign       String?
  conversionEvents  String[]  // Array of conversion event names
  interactionData   Json?     // Detailed interaction analytics
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_analytics")
}

model LeadScoring {
  id                    String    @id @default(uuid())
  userId                String    @unique
  totalScore            Int       @default(0)
  timeOnSiteScore       Int       @default(0)
  pageDepthScore        Int       @default(0)
  portfolioEngagement   Int       @default(0)
  contactFormScore      Int       @default(0)
  returnVisitorScore    Int       @default(0)
  deviceQualityScore    Int       @default(0)
  timeOfDayScore        Int       @default(0)
  classification        LeadClassification @default(COLD)
  estimatedValue        Decimal?
  probability           Float     @default(0.0)
  nextAction            String?
  urgency               LeadUrgency @default(LOW)
  lastUpdated           DateTime  @default(now())
  createdAt             DateTime  @default(now())
  
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("lead_scoring")
}

model SystemSettings {
  id        String   @id @default(uuid())
  key       String   @unique
  value     String
  type      String   // string, number, boolean, json
  category  String?  // email, payment, general, etc.
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_settings")
}

model EmailTemplate {
  id          String    @id @default(uuid())
  name        String    @unique
  subject     String
  htmlContent String
  textContent String?
  variables   String[]  // Available template variables
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@map("email_templates")
}

// Enums
enum UserRole {
  SUPER_ADMIN
  ADMIN
  PROJECT_MANAGER
  CONTRACTOR
  ARCHITECT
  ENGINEER
  CLIENT
  VIEWER
}

enum OtpType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  LOGIN_VERIFICATION
  PHONE_VERIFICATION
}

enum ProjectCategory {
  RESIDENTIAL
  COMMERCIAL
  INFRASTRUCTURE
  SMART_CITIES
  RENOVATION
  INTERIOR_DESIGN
}

enum ProjectStatus {
  PLANNING
  APPROVED
  IN_PROGRESS
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum DocumentType {
  CONTRACT
  BLUEPRINT
  PERMIT
  INVOICE
  REPORT
  CERTIFICATE
  OTHER
}

enum TimelineStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  DELAYED
  CANCELLED
}

enum ContactStatus {
  NEW
  CONTACTED
  QUALIFIED
  PROPOSAL_SENT
  NEGOTIATING
  WON
  LOST
  ARCHIVED
}

enum ContactPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  INFO
  SUCCESS
  WARNING
  ERROR
  PROJECT_UPDATE
  MESSAGE
  SYSTEM
}

enum LeadClassification {
  COLD
  WARM
  HOT
  QUALIFIED
}

enum LeadUrgency {
  LOW
  MEDIUM
  HIGH
}
